version: '3'

vars:
  COVERAGE_FILE: coverage.out
  COVERAGE_HTML: coverage.html
  COVERAGE_TXT: coverage.txt
  SECURITY_REPORT: security-report.txt
  MIN_COVERAGE: 60

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list
    silent: true

  # Testing tasks
  test:
    desc: Run all tests
    cmds:
      - echo "Running tests..."
      - go test -v -race ./...

  test:quick:
    desc: Run tests without race detection (faster)
    cmds:
      - go test ./...

  coverage:
    desc: Run tests with coverage report
    cmds:
      - echo "Running tests with coverage..."
      - go test -v -race -coverprofile={{.COVERAGE_FILE}} -covermode=atomic ./...
      - echo "\nCoverage Summary:"
      - go tool cover -func={{.COVERAGE_FILE}} | grep total

  coverage:html:
    desc: Generate HTML coverage report and open in browser
    deps: [coverage]
    cmds:
      - echo "Generating HTML coverage report..."
      - go tool cover -html={{.COVERAGE_FILE}} -o {{.COVERAGE_HTML}}
      - echo "Opening coverage report in browser..."
      - cmd: xdg-open {{.COVERAGE_HTML}}
        platforms: [linux]
        ignore_error: true
      - cmd: open {{.COVERAGE_HTML}}
        platforms: [darwin]
        ignore_error: true
      - cmd: start {{.COVERAGE_HTML}}
        platforms: [windows]
        ignore_error: true

  coverage:by-package:
    desc: Show test coverage by package
    deps: [coverage]
    cmds:
      - echo "\nCoverage by package:"
      - go tool cover -func={{.COVERAGE_FILE}} | grep -v "total:" | awk '{print $1, $3}' | column -t

  coverage:check:
    desc: Check coverage meets minimum threshold (60%)
    deps: [coverage]
    cmds:
      - |
        COVERAGE=$(go tool cover -func={{.COVERAGE_FILE}} | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${COVERAGE}%"
        if [ "$(echo "$COVERAGE < {{.MIN_COVERAGE}}" | bc)" -eq 1 ]; then
          echo "❌ Coverage below {{.MIN_COVERAGE}}% threshold"
          exit 1
        else
          echo "✓ Coverage meets {{.MIN_COVERAGE}}% threshold"
        fi

  # Benchmarking tasks
  benchmark:
    desc: Run benchmark tests
    cmds:
      - echo "Running benchmarks..."
      - go test -bench=. -benchmem -run=^$$ ./...

  benchmark:compare:
    desc: Run benchmarks and save results for comparison
    cmds:
      - echo "Running benchmarks and saving results..."
      - go test -bench=. -benchmem -run=^$$ ./... | tee benchmark-new.txt
      - echo "Results saved to benchmark-new.txt"

  # Code quality tasks
  check:
    desc: Run code formatting and vetting
    cmds:
      - go fmt ./...
      - go vet ./...

  check:hack:
    desc: Run code checks excluding vendor directory
    cmds:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)

  lint:
    desc: Run golangci-lint
    cmds:
      - echo "Running golangci-lint..."
      - |
        if ! command -v golangci-lint &> /dev/null; then
          echo "golangci-lint not installed. Install from: https://golangci-lint.run/usage/install/"
          exit 1
        fi
      - golangci-lint run --timeout=5m ./...

  lint:fix:
    desc: Run golangci-lint with auto-fix
    cmds:
      - golangci-lint run --fix --timeout=5m ./...

  # Security tasks
  security:
    desc: Run gosec security scanner
    cmds:
      - echo "Running gosec security scanner..."
      - |
        if ! command -v gosec &> /dev/null; then
          echo "gosec not installed. Run: go install github.com/securego/gosec/v2/cmd/gosec@latest"
          exit 1
        fi
      - gosec -fmt=text -out={{.SECURITY_REPORT}} ./...
      - cat {{.SECURITY_REPORT}}

  security:json:
    desc: Run security scan with JSON output
    cmds:
      - gosec -fmt=json -out=security-report.json ./...
      - cat security-report.json

  # Build tasks
  build:
    desc: Build the project
    cmds:
      - echo "Building..."
      - go build -v ./...

  build:all:
    desc: Build for multiple platforms
    cmds:
      - echo "Building for multiple platforms..."
      - GOOS=linux GOARCH=amd64 go build -o bin/eve-linux-amd64 ./...
      - GOOS=darwin GOARCH=amd64 go build -o bin/eve-darwin-amd64 ./...
      - GOOS=windows GOARCH=amd64 go build -o bin/eve-windows-amd64.exe ./...
      - echo "Binaries created in bin/"

  # Cleanup tasks
  clean:
    desc: Clean build artifacts and coverage reports
    cmds:
      - echo "Cleaning build artifacts..."
      - rm -f {{.COVERAGE_FILE}} {{.COVERAGE_HTML}} {{.COVERAGE_TXT}} {{.SECURITY_REPORT}}
      - rm -f security-report.json benchmark-new.txt benchmark-old.txt
      - rm -rf bin/
      - go clean -testcache
      - echo "Clean complete"

  clean:all:
    desc: Deep clean including mod cache
    deps: [clean]
    cmds:
      - go clean -modcache
      - go clean -cache

  # Dependency management
  deps:
    desc: Download and verify dependencies
    cmds:
      - echo "Downloading dependencies..."
      - go mod download
      - go mod verify
      - echo "✓ Dependencies downloaded and verified"

  deps:tidy:
    desc: Tidy and verify dependencies
    cmds:
      - go mod tidy
      - go mod verify

  deps:update:
    desc: Update all dependencies
    cmds:
      - go get -u ./...
      - go mod tidy

  # Development tools
  install-tools:
    desc: Install development tools
    cmds:
      - echo "Installing development tools..."
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/securego/gosec/v2/cmd/gosec@latest
      - go install golang.org/x/tools/cmd/goimports@latest
      - go install github.com/go-task/task/v3/cmd/task@latest
      - echo "✓ Development tools installed"

  # Watch mode (requires entr or watchexec)
  watch:
    desc: Run tests in watch mode
    cmds:
      - |
        if command -v watchexec &> /dev/null; then
          watchexec -e go -c task test
        elif command -v entr &> /dev/null; then
          find . -name '*.go' | entr -c task test
        else
          echo "Please install watchexec or entr for watch mode"
          echo "  brew install watchexec (macOS)"
          echo "  apt-get install entr (Linux)"
          exit 1
        fi

  # All checks (CI simulation)
  ci:
    desc: Run all CI checks locally
    cmds:
      - task: test
      - task: coverage
      - task: lint
      - task: security
      - echo "\n✓ All CI checks passed!"

  all:
    desc: Run all checks (test, coverage, lint)
    cmds:
      - task: test
      - task: coverage
      - task: lint
      - echo "\n✓ All checks passed!"

  # Documentation
  docs:
    desc: Generate and view documentation
    cmds:
      - echo "Starting godoc server at http://localhost:6060"
      - echo "Press Ctrl+C to stop"
      - godoc -http=:6060

  docs:coverage:
    desc: Generate coverage documentation
    deps: [coverage]
    cmds:
      - |
        echo "# Coverage Report" > {{.COVERAGE_TXT}}
        echo "" >> {{.COVERAGE_TXT}}
        echo "Generated: $(date)" >> {{.COVERAGE_TXT}}
        echo "" >> {{.COVERAGE_TXT}}
        go tool cover -func={{.COVERAGE_FILE}} >> {{.COVERAGE_TXT}}
        cat {{.COVERAGE_TXT}}

  # Git hooks
  hooks:install:
    desc: Install git pre-commit hooks
    cmds:
      - |
        cat > .git/hooks/pre-commit << 'EOF'
        #!/bin/sh
        echo "Running pre-commit checks..."
        task check test
        EOF
      - chmod +x .git/hooks/pre-commit
      - echo "✓ Git pre-commit hook installed"

  hooks:uninstall:
    desc: Uninstall git pre-commit hooks
    cmds:
      - rm -f .git/hooks/pre-commit
      - echo "✓ Git pre-commit hook removed"
