name: Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Tests with coverage - runs all tests (unit + integration) once
  tests-and-coverage:
    name: Tests with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    # Pre-pull Docker images to avoid timeouts
    - name: Pull Docker images
      run: |
        docker pull couchdb:3.5
        docker pull postgres:16-alpine
        docker pull rabbitmq:3.13-management-alpine
        docker pull minio/minio:latest

    - name: Run all tests with coverage
      run: go test -v -race -tags=integration -coverprofile=coverage.out -covermode=atomic ./...
      timeout-minutes: 10

    - name: Display coverage summary
      run: |
        echo "---"
        go tool cover -func=coverage.out | grep total
        echo "---"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.out
        flags: all-tests
        name: all-tests-go-${{ matrix.go-version }}
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check coverage threshold
      if: matrix.go-version == '1.24'
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        THRESHOLD=60
        echo "Current coverage: ${COVERAGE}%"
        echo "Required threshold: ${THRESHOLD}%"
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi

  # Benchmarks
  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Run benchmarks
      run: |
        echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        go test -bench=. -benchmem ./... | tee -a $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Code quality checks
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6.5.2
      with:
        version: v1.64.8
        args: --timeout=5m

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true
      if: always()
