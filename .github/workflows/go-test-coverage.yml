name: Go Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24', '1.25']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.out -o=coverage.txt
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Calculate total coverage
        id: coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "total=$COVERAGE" >> $GITHUB_OUTPUT
          echo "### Total Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY

          # Color code based on coverage
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "🟢 Coverage is good (>= 80%)" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            echo "🟡 Coverage is acceptable (>= 60%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔴 Coverage needs improvement (< 60%)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-go-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.txt
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.go-version == '1.25'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.txt', 'utf8');
            const totalCoverage = '${{ steps.coverage.outputs.total }}';

            const body = `## Test Coverage Report

            **Total Coverage: ${totalCoverage}%**

            <details>
            <summary>📊 Coverage by Package</summary>

            \`\`\`
            ${coverage}
            \`\`\`
            </details>

            ${parseFloat(totalCoverage) >= 80 ? '✅ Great coverage!' :
              parseFloat(totalCoverage) >= 60 ? '⚠️ Coverage could be improved' :
              '❌ Coverage is below recommended threshold'}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Run benchmarks
        run: |
          echo "## Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go test -bench=. -benchmem ./... | tee -a $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run golangci-lint
        run: ~/go/bin/golangci-lint run --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: results.sarif

      - name: Display security scan results
        if: always()
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          if [ -f results.sarif ]; then
            echo "SARIF report generated successfully"
            # Count issues if jq is available
            if command -v jq &> /dev/null; then
              ISSUE_COUNT=$(jq '.runs[0].results | length' results.sarif 2>/dev/null || echo "0")
              echo "Total issues found: $ISSUE_COUNT"
            fi
          else
            echo "No security issues found or scan failed"
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
